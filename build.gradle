import java.io.*
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.EncoderRegistry
import org.codehaus.groovy.runtime.IOGroovyMethods
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*

buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.commercehub:gatling-gradle-plugin:2.0'
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
		classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
		classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
	}
}

plugins {
	id 'com.palantir.git-version' version '0.10.0'
}

ext {
	SCALA_VERSION = "2.12.4"
	GATLING_VERSION = "2.3.0"
	httpHandler = new groovyx.net.http.HTTPBuilder(System.properties.MAXIMO_URL)
	httpHandler.handler.failure = { resp ->
		throw new GradleException("Unexpected failure calling Maximo Automation: ${resp.statusLine}")
	}
	maximoBuildInfoId = null

}

apply plugin: "org.sonarqube"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

apply plugin: "jacoco"

apply plugin: 'scala'
apply plugin: 'gatling'

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }
}

String serviceName
String serviceVersion
String sharedAccountNumber

jar {
	doFirst{
		baseName = serviceName
		version = serviceVersion
	}
}

sonarqube {
	   properties {
				        property 'sonar.projectName', serviceName
		   				property 'sonar.projectVersion', serviceVersion
		    }
	}


sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven {
		url "https://s3.eu-central-1.amazonaws.com/dynamodb-local-frankfurt/release"
	}
}

sourceSets {
	acceptanceTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/acceptance-test/java')
		}
		resources.srcDir file('src/acceptance-test/resources')
	}
}

sourceSets {
	loadTest {
		scala {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/load-test/scala')
		}
		resources.srcDir file('src/load-test/resources')
	}
}

configurations {
	acceptanceTestCompile.extendsFrom testCompile
	acceptanceTestRuntime.extendsFrom testRuntime
}

configurations {
	loadTestCompile.extendsFrom testCompile
	loadTestRuntime.extendsFrom testRuntime
}

gatling {
	checkForKOs = true
	koThreshold = 0

	metrics {
		graphiteUrl = "http://my.graphite.server.com"
		metricPrefix = 'my-namespace'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile "io.springfox:springfox-swagger2:2.6.1" //rest api description
	compile 'io.springfox:springfox-swagger-ui:2.6.1' //rest api description ui
	compile('org.springframework.cloud:spring-cloud-starter-hystrix')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('info.cukes:cucumber-java:1.2.5') //to use cucumber
	testCompile('info.cukes:cucumber-junit:1.2.5') //to run in junit via the ide
	testCompile('info.cukes:cucumber-spring:1.2.5') //to use dependency injection
	testCompile "org.springframework.cloud:spring-cloud-contract-wiremock"
	acceptanceTestCompile('org.springframework:spring-tx:4.3.6.RELEASE') //to run acceptance tests from feature file in IDE
	compile "org.scala-lang:scala-library:${SCALA_VERSION}"
	loadTestCompile "io.gatling:gatling-http:${GATLING_VERSION}"
	loadTestCompile "io.gatling:gatling-core:${GATLING_VERSION}"
	loadTestCompile "io.gatling.highcharts:gatling-charts-highcharts:${GATLING_VERSION}"
	loadTestCompile "org.scalaj:scalaj-http_2.12:2.3.0"
	compile "com.fasterxml.jackson.core:jackson-annotations:2.9.3"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.3"
	compile "com.amazonaws:aws-java-sdk-dynamodb:1.11.271"
	compile "com.github.derjust:spring-data-dynamodb:4.5.4"
	acceptanceTestCompile "com.amazonaws:DynamoDBLocal:[1.11,2.0)"
	acceptanceTestCompile "com.almworks.sqlite4java:sqlite4java:1.0.392"
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-contract-dependencies:1.2.1.RELEASE'
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR5"
	}
}

task version {

def dataList = [:]
def configFileName = "src/main/resources/service-config"

File configFile = new File(configFileName)

def words
def key
def value

assert file(configFile).exists()


 configFile.eachLine { line ->

 if (line.trim().size() == 0) {
	 serviceVersion = "application"
	 serviceName = "shopdirect"
	 println "File does not exist"

 } else {

  words = line.split("=")
  key=words[0]
  value=words[1]
  dataList[key]=value

  }

 serviceVersion = dataList.get("ServiceVersion")
 serviceName = dataList.get("ServiceName")
 sharedAccountNumber = dataList.get("SharedAccountNumber")
}

}

task copyNativeDeps(type: Copy) {
	from(configurations.compile + configurations.acceptanceTestCompile) {
		include '*.dll'
		include '*.dylib'
		include '*.so'
	}
	into 'build/libs'
}

task acceptanceTest(type: Test) {
	dependsOn copyNativeDeps
	systemProperty "java.library.path", 'build/libs'
	testClassesDir = sourceSets.acceptanceTest.output.classesDir
	classpath = sourceSets.acceptanceTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}

import com.commercehub.gradle.plugin.GatlingTask

task loadTest(type: GatlingTask, dependsOn: ['loadTestClasses']) {
	sourceSet = sourceSets.loadTest
	gatlingSimulation = 'MyGatlingTest'
	jvmOptions {
		minHeapSize = "1024m"
		maxHeapSize = "1024m"
		systemProperty 'gatling.execution.type', 'full'
		systemProperty 'spring.profiles.active', 'NFT'
	}
}

apply plugin: "application"
apply plugin: "jacoco"

jacoco {
    applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport){
    executionData run
    sourceSets sourceSets.main
}

//build.doLast {
//	closeMaximoChange()
//}
//
//acceptanceTest.doLast {
//	ext.maximoBuildInfoId = createMaximoChange()
//}

//task releaseNotes {
//	generateReleaseNotes()
//}

task clientJar(type: Jar) {
	from(sourceSets.main.output) {
		include "**/rest/model/**"
	}
	archiveName = serviceName + '-' + serviceVersion + '-client.jar'
	includeEmptyDirs = false
}

task s3UploadClientJar(type: com.github.skhatri.s3aws.plugin.S3UploadTask) {
	bucket='client-jar.' + sharedAccountNumber + '.lsdg.com'
	awsProfile = 'default'
	key = serviceName + '-' + serviceVersion + '-client.jar'
	file = 'build/libs/' + serviceName + '-' + serviceVersion + '-client.jar'
	link = 'latest/' + serviceName + '-client.jar'
}

import java.util.Random
import static java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME

def createMaximoChange() {
	logger.info("Calling Maximo Automation Service To Create Maximo Change")

	def details = versionDetails()
	println details.lastTag
	println details.commitDistance
	println details.gitHash
	println details.gitHashFull // full 40-character Git commit hash
	println details.branchName // is null if the repository in detached HEAD mode
	println details.isCleanTag
	println details.description

	def buildStartedPayload = [
			buildId: '123',
			url    : 'http://192.168.99.100:8081/job/maximo-automation/100/',
			time   : '2018-01-08T15:07:36.963Z',
			vcHash : details.gitHash,
			vcTag  : details.lastTag,
			vcBranch: details.branchName,
			vcDescription: details.description
	]
	println '########## \n\nbuildStartedPayload ' + buildStartedPayload

	ext.httpHandler.request(POST, JSON) {
		uri.path = '/buildinfo'
		body = buildStartedPayload

		response.success = { resp ->
			maximoBuildInfoId = IOGroovyMethods.getText(resp.entity.content)
			println "POST response data: ${maximoBuildInfoId}"
			return maximoBuildInfoId
		}

		response.'424' = { resp ->
			throw new GradleException('ERROR CREATING MAXIMO CHANGE!')
		}
	}
}

def closeMaximoChange() {
	logger.info("Calling Maximo Automation Service To Close Maximo Change")
    ext.httpHandler.request(PUT, JSON) {
        uri.path = '/buildinfo'
        body = [id: ext.maximoBuildInfoId,
                time   : '2018-01-09T18:07:36.963Z']

        response.success = { resp ->
            println "PUT response status: ${resp.statusLine}"
        }

        response.'424' = { resp ->
            throw new GradleException('ERROR CLOSING MAXIMO CHANGE!')
        }
    }
}

def generateReleaseNotes() {
	println "Generating release notes (releaseNotes.txt)"
	def releaseNotes = new File('releaseNotes.txt')
	releaseNotes.delete()
	def lastTag = ""
	def tags = []
	def procTags = "git describe --abbrev=0 --tags".execute()
	procTags.in.eachLine { line -> tags += line }
	tags += "head"

	tags.each { tag ->
		if (lastTag?.trim()) {
			releaseNotes << "[[ Changes from $lastTag to $tag ]]\n"
			def cmdLine = "git log $lastTag..$tag --pretty=format:\"%cd - %s\" --date=short"
			def procCommit = cmdLine.execute()
			procCommit.in.eachLine { line -> releaseNotes << line + "\n" }
			releaseNotes << "\n\n\n"
		}
		lastTag = tag
	}
}
